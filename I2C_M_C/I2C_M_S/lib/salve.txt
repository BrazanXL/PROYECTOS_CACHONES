#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/i2c.h"
#include "driver/gpio.h"

#define SLAVE_RX_BUF        1024
#define SLAVE_ADDR          0x32
#define SLAVE_SCL           22
#define SLAVE_SDA           21

#define LED_1_GPIO          4
#define LED_2_GPIO          5
#define LED_3_GPIO          18

void i2c_slave_init() {
    i2c_config_t i2c_slave_config = {
        .mode = I2C_MODE_SLAVE,
        .sda_io_num = SLAVE_SDA,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_io_num = SLAVE_SCL,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .slave.addr_10bit_en = 0,
        .slave.slave_addr = SLAVE_ADDR,
    };
    ESP_ERROR_CHECK(i2c_param_config(I2C_NUM_0, &i2c_slave_config));
    ESP_ERROR_CHECK(i2c_driver_install(I2C_NUM_0, i2c_slave_config.mode, SLAVE_RX_BUF*2, 0, 0));
}

void control_leds(const uint8_t *data, size_t size) {
    if (size != 6 || data[0] != 'S' || data[5] != 'E') {
        printf("Invalid UART command\n");
        return;
    }

    gpio_set_level(LED_1_GPIO, data[2] == '1' ? 1 : 0);
    gpio_set_level(LED_2_GPIO, data[3] == '1' ? 1 : 0);
    gpio_set_level(LED_3_GPIO, data[4] == '1' ? 1 : 0);
}

void app_main() {
    i2c_slave_init();

    gpio_reset_pin(LED_1_GPIO);
    gpio_reset_pin(LED_2_GPIO);
    gpio_reset_pin(LED_3_GPIO);
    gpio_set_direction(LED_1_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_2_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_3_GPIO, GPIO_MODE_OUTPUT);
    
    size_t size = 9;
    uint8_t data[9];
    int len = 0;

    while(1) {
        len = i2c_slave_read_buffer(I2C_NUM_0, data, size, 100/portTICK_PERIOD_MS);
        if (len > 0) {
            printf("Received data: %s\n", data);
            control_leds(data, len);
        }
    }
}
